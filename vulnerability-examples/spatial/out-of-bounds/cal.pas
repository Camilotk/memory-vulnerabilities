program Cal;

{$MODE OBJFPC}
{$RANGECHECKS OFF}  // Intentionally disable range checking

uses
  SysUtils, DateUtils;

type
  TSettings = record
    flags: array[0..3] of Integer;
    year: Integer;                  // Year variable - target for exploit
  end;

var
  Settings: TSettings;

// Set a flag value
procedure SetFlag(index, value: Integer);
begin
  // VULNERABILITY: No bounds checking
  Settings.flags[index] := value;
end;

// Display calendar header
procedure DisplayHeader(year: Integer);
begin
  WriteLn;
  WriteLn('                              ', year);
  WriteLn('                           Calendar');
  WriteLn;
end;

// Display sample calendar content (simplified)
procedure DisplayCalendar(year: Integer);
begin
  DisplayHeader(year);
  
  // Just show a simple representation
  WriteLn('     January ', year, '            February ', year, '           March ', year);
  WriteLn('Su Mo Tu We Th Fr Sa    Su Mo Tu We Th Fr Sa    Su Mo Tu We Th Fr Sa');
  WriteLn('          1  2  3  4                      1                      1');
  WriteLn(' 5  6  7  8  9 10 11     2  3  4  5  6  7  8     2  3  4  5  6  7  8');
  WriteLn('12 13 14 15 16 17 18     9 10 11 12 13 14 15     9 10 11 12 13 14 15');
  WriteLn('19 20 21 22 23 24 25    16 17 18 19 20 21 22    16 17 18 19 20 21 22');
  WriteLn('26 27 28 29 30 31       23 24 25 26 27 28       23 24 25 26 27 28 29');
  WriteLn('                                                30 31');
  WriteLn;
  WriteLn('     April ', year, '              May ', year, '            June ', year);
  WriteLn('Su Mo Tu We Th Fr Sa    Su Mo Tu We Th Fr Sa    Su Mo Tu We Th Fr Sa');
  WriteLn('       1  2  3  4  5                1  2  3     1  2  3  4  5  6  7');
  WriteLn(' 6  7  8  9 10 11 12     4  5  6  7  8  9 10     8  9 10 11 12 13 14');
  WriteLn('13 14 15 16 17 18 19    11 12 13 14 15 16 17    15 16 17 18 19 20 21');
  WriteLn('20 21 22 23 24 25 26    18 19 20 21 22 23 24    22 23 24 25 26 27 28');
  WriteLn('27 28 29 30             25 26 27 28 29 30 31    29 30');
  WriteLn;
  WriteLn('     July ', year, '           August ', year, '       September ', year);
  WriteLn('Su Mo Tu We Th Fr Sa    Su Mo Tu We Th Fr Sa    Su Mo Tu We Th Fr Sa');
  WriteLn('       1  2  3  4  5                   1  2        1  2  3  4  5  6');
  WriteLn(' 6  7  8  9 10 11 12     3  4  5  6  7  8  9     7  8  9 10 11 12 13');
  WriteLn('13 14 15 16 17 18 19    10 11 12 13 14 15 16    14 15 16 17 18 19 20');
  WriteLn('20 21 22 23 24 25 26    17 18 19 20 21 22 23    21 22 23 24 25 26 27');
  WriteLn('27 28 29 30 31          24 25 26 27 28 29 30    28 29 30');
  WriteLn('                        31');
  WriteLn;
  WriteLn('    October ', year, '        November ', year, '       December ', year);
  WriteLn('Su Mo Tu We Th Fr Sa    Su Mo Tu We Th Fr Sa    Su Mo Tu We Th Fr Sa');
  WriteLn('          1  2  3  4                      1        1  2  3  4  5  6');
  WriteLn(' 5  6  7  8  9 10 11     2  3  4  5  6  7  8     7  8  9 10 11 12 13');
  WriteLn('12 13 14 15 16 17 18     9 10 11 12 13 14 15    14 15 16 17 18 19 20');
  WriteLn('19 20 21 22 23 24 25    16 17 18 19 20 21 22    21 22 23 24 25 26 27');
  WriteLn('26 27 28 29 30 31       23 24 25 26 27 28 29    28 29 30 31');
  WriteLn('                        30');
end;

// Initialize settings
procedure InitializeSettings;
begin
  // Initialize flags
  Settings.flags[0] := 0;
  Settings.flags[1] := 0;
  Settings.flags[2] := 0;
  Settings.flags[3] := 0;
  
  // Set default year to current year
  Settings.year := YearOf(Date);
end;

// Process command line arguments
procedure ProcessArguments;
var
  i: Integer;
begin
  i := 1;
  while i <= ParamCount do
  begin
    if (ParamStr(i) = '-p') and (i + 2 <= ParamCount) then
    begin
      // Format is -p INDEX VALUE
      SetFlag(StrToIntDef(ParamStr(i+1), 0), StrToIntDef(ParamStr(i+2), 0));
      i := i + 3;
    end
    else
      i := i + 1;
  end;
end;

// Main program
begin
  InitializeSettings;
  ProcessArguments;
  DisplayCalendar(Settings.year);
end.
