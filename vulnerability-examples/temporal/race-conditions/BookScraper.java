import java.net.*;
import java.net.http.*;
import java.util.*;
import java.util.regex.*;

public class BookScraper {

    public static void main(String[] args) throws Exception {
        if (args.length == 0) {
            System.err.println("Usage: java BookScraper <author_name>");
            System.exit(1);
        }

        // URL encode the query
        String query = URLEncoder.encode(String.join(" ", args), "UTF-8");
        String apiUrl = "https://www.gutenberg.org/ebooks/search.json?query=" + query;
        System.err.println("Searching for: " + query);

        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create(apiUrl))
            .header("Accept", "application/json")
            .timeout(java.time.Duration.ofSeconds(15))
            .build();

        try {
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                String json = response.body();
                List<Book> books = parseJson(json);
                
                System.out.println("[");
                for (int i = 0; i < books.size(); i++) {
                    System.out.print(books.get(i).toJson());
                    if (i < books.size() - 1) System.out.println(",");
                }
                System.out.println("\n]");
                System.err.println("Found " + books.size() + " books");
            } else {
                System.err.println("Error: HTTP " + response.statusCode());
                System.err.println("Response: " + response.body());
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    private static List<Book> parseJson(String json) {
        List<Book> books = new ArrayList<>();
        
        // Simple JSON parsing without external libraries
        String[] results = json.split("\"results\":\\[")[1].split("\\]")[0].split("\\},\\{");
        
        for (String result : results) {
            try {
                String title = extractValue(result, "title");
                String author = extractAgentName(result);
                String id = extractValue(result, "id");
                String url = "https://www.gutenberg.org/ebooks/" + id;
                
                if (!title.isEmpty() && !author.isEmpty()) {
                    books.add(new Book(title, author, url));
                }
            } catch (Exception e) {
                System.err.println("Skipping malformed record: " + e.getMessage());
            }
        }
        return books;
    }

    private static String extractValue(String json, String key) {
        String pattern = "\"" + key + "\":\"(.*?)\"";
        Pattern r = Pattern.compile(pattern);
        Matcher m = r.matcher(json);
        return m.find() ? m.group(1).replace("\\\"", "\"") : "";
    }

    private static String extractAgentName(String json) {
        String pattern = "\"agents\":\\[\\{\"name\":\"(.*?)\"";
        Pattern r = Pattern.compile(pattern);
        Matcher m = r.matcher(json);
        return m.find() ? m.group(1).replace("\\\"", "\"") : "Unknown";
    }

    static class Book {
        String title, author, url;

        Book(String title, String author, String url) {
            this.title = title;
            this.author = author;
            this.url = url;
        }

        String toJson() {
            return String.format(
                "  {\n    \"title\": \"%s\",\n    \"author\": \"%s\",\n    \"url\": \"%s\"\n  }",
                title.replace("\"", "\\\""),
                author.replace("\"", "\\\""),
                url
            );
        }
    }
}
