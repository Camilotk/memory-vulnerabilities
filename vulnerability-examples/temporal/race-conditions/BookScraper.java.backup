import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.locks.*;

public class BookScraper {

    static final String BASE_URL = "https://standardebooks.org";
    static final String SEARCH_URL = BASE_URL + "/ebooks?query=";
    static final String DOWNLOAD_FOLDER = "out/epubs/";
    static final Lock downloadLock = new ReentrantLock();

    public static void main(String[] args) throws Exception {
        if (args.length == 0) {
            System.out.println("Usage: java BookScraper \"search query\"");
            return;
        }

        String query = args[0].replace(" ", "+");
        System.out.println("[StandardEbooks] Starting scrape for query: " + query);

        new File(DOWNLOAD_FOLDER).mkdirs();

        List<Book> books = fetchBooks(query);

        System.out.println("Found " + books.size() + " books.");

        List<Thread> threads = new ArrayList<>();

        for (Book book : books) {
            Thread t = new Thread(() -> downloadBook(book));
            t.start();
            threads.add(t);
        }

        for (Thread t : threads) {
            t.join();
        }

        System.out.println("Finished all downloads.");
    }

    static List<Book> fetchBooks(String query) throws Exception {
        List<Book> books = new ArrayList<>();

        URL url = new URI(SEARCH_URL + query).toURL();
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestProperty("User-Agent", "Mozilla/5.0");

        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String inputLine;
        StringBuilder html = new StringBuilder();
        while ((inputLine = in.readLine()) != null) {
            html.append(inputLine);
        }
        in.close();

        String htmlContent = html.toString();

        // Parse HTML manually
        int index = 0;
        while ((index = htmlContent.indexOf("<li typeof=\"schema:Book\"", index)) != -1) {
            int start = htmlContent.indexOf("about=\"", index) + 7;
            int end = htmlContent.indexOf("\"", start);
            String bookPath = htmlContent.substring(start, end);

            int nameStart = htmlContent.indexOf("<span property=\"schema:name\">", end) + 30;
            int nameEnd = htmlContent.indexOf("</span>", nameStart);
            String bookTitle = htmlContent.substring(nameStart, nameEnd);

            int authorStart = htmlContent.indexOf("<span property=\"schema:name\">", nameEnd) + 30;
            int authorEnd = htmlContent.indexOf("</span>", authorStart);
            String author = htmlContent.substring(authorStart, authorEnd);

            books.add(new Book(bookTitle, author, bookPath));
            index = authorEnd;
        }

        return books;
    }

    static void downloadBook(Book book) {
        String cleanTitle = book.title.toLowerCase().replace(" ", "-").replaceAll("[^a-z0-9-]", "");
        String cleanAuthor = book.author.toLowerCase().replace(" ", "-").replaceAll("[^a-z0-9-]", "");

        String downloadUrl = BASE_URL + book.bookPath + "/downloads/" + cleanAuthor + "_" + cleanTitle + ".epub";
        String outputPath = DOWNLOAD_FOLDER + cleanAuthor + "_" + cleanTitle + ".epub";

        try {
            System.out.println("[" + Thread.currentThread().getName() + "] Downloading: " + book.title);

            URL url = new URI(downloadUrl).toURL();
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestProperty("User-Agent", "Mozilla/5.0");

            if (conn.getResponseCode() != 200) {
                System.out.println("Failed: " + book.title + " - No EPUB found for " + book.title);
                return;
            }

            try (InputStream in = conn.getInputStream()) {
                downloadLock.lock();
                try (FileOutputStream fos = new FileOutputStream(outputPath)) {
                    byte[] buffer = new byte[4096];
                    int bytesRead;
                    while ((bytesRead = in.read(buffer)) != -1) {
                        fos.write(buffer, 0, bytesRead);
                    }
                } finally {
                    downloadLock.unlock();
                }
            }

            System.out.println("[" + Thread.currentThread().getName() + "] Saved: " + outputPath);

        } catch (Exception e) {
            System.out.println("Failed to download " + book.title + ": " + e.getMessage());
        }
    }

    static class Book {
        String title;
        String author;
        String bookPath;

        Book(String title, String author, String bookPath) {
            this.title = title;
            this.author = author;
            this.bookPath = bookPath;
        }
    }
}
